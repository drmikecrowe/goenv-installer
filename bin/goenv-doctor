#!/bin/bash
# Usage: goenv doctor
# Summary: Detects common problems in goenv installation

set -e
[ -n "$GOENV_DEBUG" ] && set -x

indent() {
  sed 's/^/  /'
}

printc() {
  local color_name="color_$1"
  local fmt="$2"
  shift 2

  if [[ $fmt == *"\n" ]]; then
    fmt="${!color_name}${fmt%\\n}${color_reset}\n"
  else
    fmt="${!color_name}${fmt}${color_reset}"
  fi

  printf "$fmt" "$@"
}

if [ -t 1 ]; then
  color_red=$'\e[31m'
  color_green=$'\e[32m'
  color_yellow=$'\e[1;33m'
  color_bright=$'\e[1;37m'
  color_reset=$'\e[0m'
else
  color_red=""
  color_green=""
  color_yellow=""
  color_bright=""
  color_reset=""
fi

warnings=0

if [ $(uname -s) = "Darwin" ]; then
  bashrc=".bash_profile"
else
  bashrc=".bashrc"
fi

echo -n "Checking for \`goenv' in PATH: "
num_locations="$(which -a goenv | uniq | wc -l)"
if [ $num_locations -eq 0 ]; then
  printc red "not found\n"
  { if [ -x ~/.goenv/bin/goenv ]; then
      echo "You seem to have goenv installed in \`$HOME/.goenv/bin', but that"
      echo "directory is not present in PATH. Please add it to PATH by configuring"
      echo "your \`~/${bashrc}', \`~/.zshrc', or \`~/.config/fish/config.fish'."
    else
      echo "Please refer to https://github.com/syndbg/goenv/blob/master/INSTALL.md"
    fi
  } | indent
  exit 1
elif [ $num_locations -eq 1 ]; then
  printc green "%s\n" "$(which goenv)"
else
  printc yellow "multiple\n"
  { echo "You seem to have multiple goenv installs in the following locations."
    echo "Please pick just one installation and remove the others."
    echo
    which -a goenv
  } | indent
  echo
  : $((warnings++))
fi

GOENV_ROOT="${GOENV_ROOT:-$(goenv root)}"

OLDIFS="$IFS"
IFS=:
path=($PATH)
IFS="$OLDIFS"

echo -n "Checking for goenv shims in PATH: "
shims_dir="${GOENV_ROOT}/shims"
found=""
for dir in "${path[@]}"; do [ "$dir" != "$shims_dir" ] || found=true; done
if [ -n "$found" ]; then
  printc green "OK\n"
else
  printc red "not found\n"
  { echo "The directory \`$shims_dir' must be present in PATH for goenv to work."
    echo "Please run \`goenv init' and follow the instructions."
  } | indent
  echo
  : $((warnings++))
fi

echo -n "Checking \`goenv install' support: "
goenv_installs="$({ ls "$GOENV_ROOT"/plugins/*/bin/goenv-install 2>/dev/null || true
                    which -a goenv-install 2>/dev/null || true
                  } | uniq)"
num_installs="$(wc -l <<<"$goenv_installs")"
if [ -z "$goenv_installs" ]; then
  printc red "not found\n"
  { echo "Unless you plan to add Go versions manually, you should install go-build."
    echo "Please refer to https://github.com/syndbg/goenv/tree/master/plugins/go-build"
  }
  echo
  : $((warnings++))
elif [ $num_installs -eq 1 ]; then
  printc green "$goenv_installs"
  if [[ $goenv_installs == "$GOENV_ROOT"/plugins/* ]]; then
    goenv_install_cmd="${goenv_installs##*/}"
    goenv_install_version="$(goenv "${goenv_install_cmd#goenv-}" --version || true)"
  else
    goenv_install_version="$("$goenv_installs" --version || true)"
  fi
  printf " (%s)\n" "$goenv_install_version"
else
  printc yellow "multiple\n"
  { echo "You seem to have multiple \`goenv-install' in the following locations."
    echo "Please pick just one installation and remove the others."
    echo
    echo "$goenv_installs"
  } | indent
  echo
  : $((warnings++))
fi

echo -n "Counting installed Go versions: "
num_rubies="$(goenv versions --bare | wc -l)"
if [ $num_rubies -eq 0 ]; then
  printc yellow "none\n"
  echo "There aren't any Go versions installed under \`$GOENV_ROOT/versions'." | indent
  [ $num_installs -eq 0 ] || {
    echo -n "You can install Go versions like so: "
    printc bright "goenv install 2.2.4\n"
  } | indent
else
  printc green "%d versions\n" $num_rubies
fi

echo -n "Auditing installed plugins: "
OLDIFS="$IFS"
IFS=$'\n'
hooks=(`goenv hooks exec`)
IFS="$OLDIFS"
plugin_broken=0
for hook in "${hooks[@]}"; do
  plugin_name=
  message=

  if [ -n "$plugin_name" ]; then
    [ "$((plugin_broken++))" -gt 0 ] || printc yellow "warning\n"
    { printc bright "$plugin_name"
      echo " $message"
      echo "  (found in \`${hook}')"
    } | indent
    : $((warnings++))
  fi
done
[ "$plugin_broken" -gt 0 ] || printc green "OK\n"

[ $warnings -eq 0 ]
